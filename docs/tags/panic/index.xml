<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>panic on rm -rf /</title>
    <link>/tags/panic/</link>
    <description>Recent content in panic on rm -rf /</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 19:16:22 +0000</lastBuildDate>
    
	<atom:link href="/tags/panic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang: Panicking Safely</title>
      <link>/posts/panic/</link>
      <pubDate>Tue, 28 Jan 2020 19:16:22 +0000</pubDate>
      
      <guid>/posts/panic/</guid>
      <description>Golang code can panic, causing availability issues, maybe even a denial of service vector. Compared to C and C++, it&amp;rsquo;s pretty innocuous. Still, denial of service is a serious issue: why not just use recover in all goroutines and keep the show on the road?
An Example Consider the following code:
// buggy reads data from input 16 bytes at a time, munges it and then writes it to output func buggy(input, output string) error { in, err := os.</description>
    </item>
    
  </channel>
</rss>