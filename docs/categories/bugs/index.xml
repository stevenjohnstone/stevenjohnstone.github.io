<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bugs on rm -rf /</title>
    <link>/categories/bugs/</link>
    <description>Recent content in bugs on rm -rf /</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Oct 2017 11:39:00 +0100</lastBuildDate>
    
	<atom:link href="/categories/bugs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leaking File Descriptors in Go</title>
      <link>/posts/file-descriptor-go/</link>
      <pubDate>Fri, 13 Oct 2017 11:39:00 +0100</pubDate>
      
      <guid>/posts/file-descriptor-go/</guid>
      <description>Golang, File Descriptors and Finalizers If you Open() a file in Golang and it goes out of scope, then it&amp;rsquo;ll be closed the next time the garbage collector runs as there&amp;rsquo;s a cleanup finalizer set when Open() is called.
You can see this in action in the following program:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;runtime&amp;#34; ) func allocate() int { //use this file as our test subject 	_, sourceFile, _, ok := runtime.</description>
    </item>
    
  </channel>
</rss>