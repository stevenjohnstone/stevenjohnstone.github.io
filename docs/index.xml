<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on rm -rf /</title>
    <link>/</link>
    <description>Recent content in Home on rm -rf /</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2021 19:36:58 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Types and Secrets: Part 1</title>
      <link>/posts/types/</link>
      <pubDate>Fri, 01 Jan 2021 19:36:58 +0000</pubDate>
      
      <guid>/posts/types/</guid>
      <description>A Toy Authentication System Suspend disbelief and consider the following toy authentication system:
package main import ( &amp;#34;fmt&amp;#34; ) func allowAccess(secret string) bool { return secret == &amp;#34;foo&amp;#34; } func main() { secret := &amp;#34;foo&amp;#34; fmt.Printf(&amp;#34;Access: %v, Secret: %s&amp;#34;, allowAccess(secret), secret) } Try this at the Golang playground.
What&amp;rsquo;s wrong with this code? In my work auditing Golang codebases, I often see secrets being passed around as strings or byte slices.</description>
    </item>
    
    <item>
      <title>Reporting Vulnerabilities To Snyk</title>
      <link>/posts/snyk/</link>
      <pubDate>Sat, 19 Sep 2020 22:18:02 +0000</pubDate>
      
      <guid>/posts/snyk/</guid>
      <description>Snyk is a CNA for Golang packages (and other popular languages). When I learned that they&amp;rsquo;d accept vulnerability reports, I decided to try them out with a couple of old bugs which I&amp;rsquo;d reported but got no response from the project author.
The turnaround on these issues was very quick (a couple of hours, on a weekend no less) and there are now two CVEs assigned: CVE-2020-7711 and CVE-2020-7731.</description>
    </item>
    
    <item>
      <title>Four of a Kind</title>
      <link>/posts/four-of-a-kind/</link>
      <pubDate>Sat, 08 Feb 2020 18:40:13 +0000</pubDate>
      
      <guid>/posts/four-of-a-kind/</guid>
      <description>I stumbled across a blog from a really interesting pioneer of computing, David S Maynard. This post about a probability puzzle nerd-sniped me. The problem statement is:
Imagine we have a deck of 52 standard playing cards. First question: How many cards do we have to draw until we can be sure that we have four of a kind? In other words: What is the minimum number of cards we must draw until we can be certain that four of those cards are the same kind?</description>
    </item>
    
    <item>
      <title>I&#39;m Stevie</title>
      <link>/about/</link>
      <pubDate>Wed, 29 Jan 2020 10:40:48 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I am/have been
 a mathematician a Codian, Tandberg, Cisco, Acano and Jazz Networks alum an automation engineer, embedded systems engineer, security specialist, CSO.  Apart from brief periods after acquisition, my entire professional life has been in startups. I&amp;rsquo;ve done a wide variety of things to build these companies:
 automated production line tests wrote processor bootstrap code for embedded systems ported operating systems rolled custom linux distributions wrote kernel drivers tinkered with FPGAs optimised network stacks tracked down silicon bugs hunted security flaws built auth systems ran PSIRTs  I know how to program in</description>
    </item>
    
    <item>
      <title>Golang: Panicking Safely</title>
      <link>/posts/panic/</link>
      <pubDate>Tue, 28 Jan 2020 19:16:22 +0000</pubDate>
      
      <guid>/posts/panic/</guid>
      <description>Golang code can panic, causing availability issues, maybe even a denial of service vector. Compared to C and C++, it&amp;rsquo;s pretty innocuous. Still, denial of service is a serious issue: why not just use recover in all goroutines and keep the show on the road?
An Example Consider the following code:
// buggy reads data from input 16 bytes at a time, munges it and then writes it to output func buggy(input, output string) error { in, err := os.</description>
    </item>
    
    <item>
      <title>xchg rax,rax</title>
      <link>/posts/xchg-rax-rax/</link>
      <pubDate>Sat, 12 Jan 2019 17:16:29 +0000</pubDate>
      
      <guid>/posts/xchg-rax-rax/</guid>
      <description>x86-64 Kata The book xchg rax,rax (content available free here) is a collection of 0x40 x86-64 snippets. It has no text other than chunks of assembly language. You read the code and ponder its meaning. Kata for the budding reverse engineer.
Spoiler Alert Program 0x03 is pretty neat:
sub rdx,rax sbb rcx,rcx and rcx,rdx add rax,rcx Let me spoil this for you: at the end of this program, rax will contain the smaller of the original rax and rdx values.</description>
    </item>
    
    <item>
      <title>SO_REUASEADDR and Golang</title>
      <link>/posts/so_reuaseaddr-golang/</link>
      <pubDate>Fri, 13 Oct 2017 13:53:00 +0100</pubDate>
      
      <guid>/posts/so_reuaseaddr-golang/</guid>
      <description>A Flaky Test I was investigating a test which failed with a very low probability. It boiled down to this:
package main import ( &amp;#34;net&amp;#34; &amp;#34;time&amp;#34; ) func main() { //port zero means let the OS choose a free port 	l, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:0&amp;#34;) if err != nil { panic(err) } addr := l.Addr().String() go func() { for { c, err := l.Accept() if err != nil { return } c.</description>
    </item>
    
    <item>
      <title>Leaking File Descriptors in Go</title>
      <link>/posts/file-descriptor-go/</link>
      <pubDate>Fri, 13 Oct 2017 11:39:00 +0100</pubDate>
      
      <guid>/posts/file-descriptor-go/</guid>
      <description>Golang, File Descriptors and Finalizers If you Open() a file in Golang and it goes out of scope, then it&amp;rsquo;ll be closed the next time the garbage collector runs as there&amp;rsquo;s a cleanup finalizer set when Open() is called.
You can see this in action in the following program:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;runtime&amp;#34; ) func allocate() int { //use this file as our test subject 	_, sourceFile, _, ok := runtime.</description>
    </item>
    
    <item>
      <title>CVE-2017-15042</title>
      <link>/posts/cve-2017-15042/</link>
      <pubDate>Sat, 07 Oct 2017 14:46:09 +0100</pubDate>
      
      <guid>/posts/cve-2017-15042/</guid>
      <description>I Went Looking For A STARTTLS Bug I&amp;rsquo;ve been putting together a cryptography course for my colleagues which focuses on mistakes. Its working title is Cryptography Done Wrong which should give you an idea of the tone. There&amp;rsquo;s a wealth of examples of systems assembled from sound cryptographic components which end up with security issues (for some definition of secure).
Over the years, TLS has been an excellent source of examples for such a course.</description>
    </item>
    
    <item>
      <title>All Posts</title>
      <link>/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/single/</guid>
      <description>2021-01-01 Golang Types and Secrets: Part 1  A Toy Authentication System Suspend disbelief and consider the following toy authentication system:
package main import ( &amp;#34;fmt&amp;#34; ) func allowAccess(secret string) bool { return secret == &amp;#34;foo&amp;#34; } func main() { secret := &amp;#34;foo&amp;#34; fmt.Printf(&amp;#34;Access: %v, Secret: %s&amp;#34;, allowAccess(secret), secret) } Try this at the Golang playground.
What&amp;rsquo;s wrong with this code? In my work auditing Golang codebases, I often see secrets being passed around as strings or byte slices.</description>
    </item>
    
  </channel>
</rss>
